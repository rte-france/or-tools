// Copyright 2010-2022 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package operations_research.math_opt;

import "ortools/math_opt/callback.proto";
import "ortools/math_opt/infeasible_subsystem.proto";
import "ortools/math_opt/model.proto";
import "ortools/math_opt/model_parameters.proto";
import "ortools/math_opt/model_update.proto";
import "ortools/math_opt/parameters.proto";
import "ortools/math_opt/result.proto";

option java_package = "com.google.ortools.mathopt";
option java_multiple_files = true;

// Request for a unary remote solve in MathOpt.
message SolveRequest {
  // Solver type to numerically solve the problem. Note that if a solver does
  // not support a specific feautre in the model, the optimization procedure
  // won't be successful.
  SolverTypeProto solver_type = 1;

  // A mathematical representation of the optimization problem to solve.
  ModelProto model = 2;

  SolverInitializerProto initializer = 3;

  // Parameters to control a single solve. The enable_output parameter is
  // handled specifically. For solvers that support messages callbacks, setting
  // it to true will have the server register a message callback. The resulting
  // messages will be returned in SolveResponse.messages. For other
  // solvers, setting enable_output to true will result in an error.
  SolveParametersProto parameters = 4;

  // Parameters to control a single solve that are specific to the input model
  // (see SolveParametersProto for model independent parameters).
  ModelSolveParametersProto model_parameters = 5;
}

// Response for a unary remote solve in MathOpt.
message SolveResponse {
  // Description of the output of solving the model in the request.
  SolveResultProto result = 1;

  // If SolveParametersProto.enable_output has been used, this will contain log
  // messages for solvers that support message callbacks.
  repeated string messages = 2;
}
