name: Windows-Ubuntu

on:
  push:
    branches:
      - main
      - feature/*
      - merge*
      - fix/*
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:

  build_sirius:
    name: build sirius
    runs-on: ubuntu-latest
    container: 'centos:centos7'
    env:
      Sirius_Ref: antares_integration
    steps:
      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses:
          bruceadams/get-release@v1.2.3

      - name: install requirements
        run: |
          yum install -y epel-release
          yum install -y git redhat-lsb-core gcc gcc-c++ make wget centos-release-scl scl-utils rpm-build
          yum install -y cmake3 devtoolset-9
          yum install -y rh-git227-git

      - name: set sirius output variables
        id: sirius-variables
        shell: bash
        run: |
          SIRIUS_WORKING_DIR=sirius-solver
          SIRIUS_BASE_PATH="${{ github.workspace }}/${SIRIUS_WORKING_DIR}"
          SIRIUS_INSTALL_DIR=SiriusInstall
          SIRIUS_INSTALL_PATH="${SIRIUS_BASE_PATH}/${SIRIUS_INSTALL_DIR}"
          ARCHIVE_NAME="sirius_install.zip"
          ARCHIVE_PATH="${SIRIUS_BASE_PATH}/${ARCHIVE_NAME}"
          echo "::set-output name=sirius-working-dir::$SIRIUS_WORKING_DIR"
          echo "::set-output name=sirius-base-path::$SIRIUS_BASE_PATH"
          echo "::set-output name=sirius-install-dir::$SIRIUS_INSTALL_DIR"
          echo "::set-output name=sirius-install-path::$SIRIUS_INSTALL_PATH"
          echo "::set-output name=sirius-archive-name::$ARCHIVE_NAME"
          echo "::set-output name=sirius-archive-path::$ARCHIVE_PATH"

      - name: Checkout sirius
        run: |
          git clone rte-france/sirius-solver -b ${{ env.Sirius_Ref }} ${{ steps.sirius-variables.outputs.sirius-working-dir }}

      - name: Configure Sirius
        shell: bash
        run: |
          source /opt/rh/devtoolset-9/enable
          cd ${{ steps.sirius-variables.outputs.sirius-working-dir }}
          cmake3 -S src \
                -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${{ steps.sirius-variables.outputs.sirius-install-dir }}"

      - name: Build & Install Sirius
        shell: bash
        run: |
          source /opt/rh/devtoolset-9/enable
          cd ${{ steps.sirius-variables.outputs.sirius-working-dir }}
          cmake3 --build build --config Release --target install -j14

      - name: Zip Install Sirius
        shell: bash
        run: |
          cd ${{ steps.sirius-variables.outputs.sirius-working-dir }}
          ARCHIVE_NAME="${{ steps.sirius-variables.outputs.sirius-archive-name }}"
          zip -r $ARCHIVE_NAME "${{ steps.sirius-variables.outputs.sirius-install-dir }}"

      - name: Upload sirius install
        uses: actions/upload-artifact@v2
        with:
          name: centos7_sirius
          path: ${{ steps.sirius-variables.outputs.sirius-install-path }}

      - name: Publish sirius install
        if:  ${{ github.event_name == 'release' && github.event.action == 'created' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.sirius-variables.outputs.sirius-install-path }}
          asset_name: centos_${{ steps.sirius-variables.outputs.sirius-archive-name }}
          asset_content_type: application/zip


  build:
    needs: [build_sirius]
    name: shrd=${{ matrix.shared }} sirius=${{ matrix.sirius }} xprs=${{ matrix.xprs }} extras=${{ matrix.extras }} java=${{ matrix.java }} dotnet=${{ matrix.dotnet }} python=${{ matrix.python }}-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    env:
      Sirius_Ref: antares_integration
      XPRESSDIR: ${{ github.workspace }}/xpressmp813
      XPRESS: ${{ github.workspace }}/xpressmp813/bin
      XPRS_LIB_PATH: ${{ github.workspace }}/xpressmp813/lib
      SIRIUS_INSTALL_PATH : ${{ github.workspace }}/sirius_install
      SIRIUS: ${{ github.workspace }}/sirius_install/bin
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        python: [ON, OFF]
        xprs: [ON]
        sirius: [ON, OFF]
        shared: [ON, OFF]
        extras: [ON, OFF]
        # the matrix is a bit complicated because
        # we need static C++-libraries for both Windows and linux
        # Under windows we can only build ortools Python/Java/C# libraries using a STATIC build
        # Under Linux we can only build ortools Python/Java/C# libraries using a SHARED build
        # we need python support for multiple python versions
        # So we have the following jobs:
        # 20 jobs
        # ( xpress=ON sirius=OFF, xpress=ON sirius=ON ) X (Windows static, linux shared) X
        # [ publish-or=ON  java=ON  dotnet=ON  python=OFF x (python-version=3.10),
        #   publish-or=OFF java=OFF dotnet=OFF python=ON  x (python-version=(3.7, 3.8, 3.9, 3.10)) ]
        # 2 jobs
        # ( xpress=ON sirius=OFF, xpress=ON sirius=ON ) X (linux shared) X
        # [ publish-or=ON  java=OFF  dotnet=OFF  python=OFF x (python-version=3.10)
        exclude:
          - xprs: OFF
            sirius: OFF
          - shared: OFF
            extras: ON
          - shared: ON
            extras: OFF
          - extras: OFF
            python: ON
          - python: OFF
            python-version: '3.7'
          - python: OFF
            python-version: '3.8'
          - python: OFF
            python-version: '3.9'
        include:
          - extras: ON
            python: OFF
            publish-or: ON
            dotnet: ON
            java: ON
          - extras: ON
            python: ON
            publish-or: OFF
            dotnet: OFF
            java: OFF
          - extras: OFF
            python: OFF
            publish-or: ON
            java: OFF
            dotnet: OFF

    steps:
      - name: set name variables
        id: names
        shell: bash
        run: |
          SHARED=${{ matrix.shared }}
          [ $SHARED == "ON" ] && WITH_SHARED="_shared" || WITH_SHARED="_static"
          XPRS=${{ matrix.xprs }}
          [ $XPRS == "ON" ] && WITH_XPRS="_xprs" || WITH_XPRS=""
          SIRIUS=${{ matrix.sirius }}
          [ $SIRIUS == "ON" ] && WITH_SIRIUS="_sirius" || WITH_SIRIUS=""
          OS="_${{ matrix.os }}"
          APPENDIX="${OS}${WITH_SIRIUS}${WITH_XPRS}"
          echo "::set-output name=appendix::$APPENDIX"
          APPENDIX_WITH_SHARED="${OS}${WITH_SHARED}${WITH_SIRIUS}${WITH_XPRS}"
          echo "::set-output name=appendix_with_shared::$APPENDIX_WITH_SHARED"

      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses:
          bruceadams/get-release@v1.2.3

#      - name: Checkout or-tools
#        run: |
#          git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git -b ${BRANCH_NAME} .

      - name: Checkout xpressmp linux
        run: |
          git clone https://${{ secrets.ACCESS_TOKEN }}@github.com/rte-france/xpress-mp.git ${{ env.XPRESSDIR }}
