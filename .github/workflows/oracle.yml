name: OracleLinux

on:
  push:
    branches:
      - main
      - feature/*
      - merge*
      - fix/*
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}
  RELEASE_CREATED: ${{ github.event_name == 'release' && github.event.action == 'created' }}

jobs:

  build:
    name: shrd=${{ matrix.cmake.shared }} java=${{ matrix.cmake.java }} python=${{ matrix.cmake.python }}
    runs-on: ubuntu-latest
    container: 'oraclelinux:8'
    env:
      XPRESS_INSTALL_DIR: xpressmp/
    strategy:
      fail-fast: false
      matrix:
        cmake: [
          { shared: OFF, java: OFF, dotnet: OFF, python: OFF},
          { shared: ON,  java: ON,  dotnet: OFF, python: ON},
        ]
    steps:
      - name: set name variables
        id: names
        run: |
          SHARED=${{ matrix.cmake.shared }}
          [ $SHARED == "ON" ] && WITH_SHARED="_shared" || WITH_SHARED="_static"
          OS="_oraclelinux-8"
          APPENDIX="${OS}"
          echo "::set-output name=appendix::$APPENDIX"
          APPENDIX_WITH_SHARED="${OS}${WITH_SHARED}"
          echo "::set-output name=appendix_with_shared::$APPENDIX_WITH_SHARED"

      # Fill variable ${BRANCH_NAME}
      - uses: nelonoel/branch-name@v1.0.1

      - name: Install requirements (dnf)
        run: |
          dnf -y update
          dnf -y install git wget openssl-devel
          dnf -y groupinstall "Development Tools"
          dnf -y install gcc-toolset-11
          dnf clean all
          rm -rf /var/cache/dnf
      - name: Install swig (dnf)
        run: |
          dnf -y update
          dnf -y install pcre-devel
          dnf clean all
          rm -rf /var/cache/dnf
          wget -q "https://downloads.sourceforge.net/project/swig/swig/swig-4.1.1/swig-4.1.1.tar.gz"
          tar xvf swig-4.1.1.tar.gz
          rm swig-4.1.1.tar.gz
          cd swig-4.1.1
          ./configure --prefix=/usr
          make -j 4
          make install
          cd ..
          rm -rf swig-4.1.1
      - name: Install java (jdk)
        if: ${{ matrix.cmake.java == 'ON' }}
        run: |
          dnf -y update
          dnf -y install java-1.8.0-openjdk  java-1.8.0-openjdk-devel maven
          dnf clean all
          rm -rf /var/cache/dnf
      - name: Install python
        run: |
          export PATH=/root/.local/bin:$PATH
          dnf -y update
          dnf -y install python39-devel python39-pip python39-numpy
          dnf clean all
          echo "/root/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          python3 -m pip install --upgrade pip
          python3 -m pip install protobuf mypy-protobuf absl-py setuptools wheel pandas virtualenv

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.26.x'

      - name: Checkout OR-Tools
        run: |
          git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git -b ${BRANCH_NAME} .

      - name: Set-up Xpress with pip
        run: |
          python3 -m pip install xpress==9.0.0
          XPRESS_DIR=/usr/local/lib64/python3.9/site-packages/xpress
          echo "XPRESSDIR=$XPRESS_DIR" >> $GITHUB_ENV
          echo "XPAUTH_PATH=$XPRESS_DIR/license/community-xpauth.xpr" >> $GITHUB_ENV
          ln -s $XPRESS_DIR/lib/libxprs.so.41 $XPRESS_DIR/lib/libxprs.so

      - name: Configure OR-Tools
        run: |
          source /opt/rh/gcc-toolset-11/enable
          cmake --version
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=${{ matrix.cmake.shared }} \
            -DBUILD_PYTHON=${{ matrix.cmake.python }} \
            -DBUILD_JAVA=${{ matrix.cmake.java }} \
            -DBUILD_DOTNET=${{ matrix.cmake.dotnet }} \
            -DBUILD_EXAMPLES=ON \
            -DBUILD_XPRESS_TEST_AND_EXAMPLES=ON \
            -DBUILD_DEPS=ON \
            -DCMAKE_INSTALL_PREFIX="build/install" \
            -DBUILD_SAMPLES=OFF \
            -DBUILD_FLATZINC=OFF

      - name: Build OR-Tools Linux
        run: |
          source /opt/rh/gcc-toolset-11/enable
          cmake --build build --config Release --target all install -j4

      - name: run tests not xpress
        run: |
          cd build
          ctest -C Release --output-on-failure  -E "xpress"

      - name: run tests xpress
        run: |
          cd build
          ctest -V -C Release --output-on-failure  -R "xpress"

      - name: Prepare OR-Tools install
        id: or-install
        run: |
          cd build
          ARCHIVE_NAME="ortools_cxx${{ steps.names.outputs.appendix_with_shared }}.zip"
          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
          zip -r $ARCHIVE_PATH ./install
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      - name: Upload OR-Tools install artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.or-install.outputs.archive_name }}
          path: ${{ steps.or-install.outputs.archive_path }}

      - name: prepare OR-Tools wheel
        if: ${{ matrix.cmake.python == 'ON' }}
        id: wheel
        run: |
          MY_DIR="ortools_python-${{ steps.names.outputs.appendix }}"
          mkdir $MY_DIR
          cp build/python/dist/*.whl $MY_DIR
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
          zip -r ${ARCHIVE_PATH} ${MY_DIR}
          echo "::set-output name=archive_name::$ARCHIVE_NAME"
          echo "::set-output name=archive_path::$ARCHIVE_PATH"
      - name: Upload OR-Tools wheel artifact
        if: ${{ matrix.cmake.python == 'ON' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wheel.outputs.archive_name }}
          path: ${{ steps.wheel.outputs.archive_path }}

      - name: prepare OR-Tools jar
        if: ${{ matrix.cmake.java == 'ON' }}
        id: jar
        run: |
          MY_DIR="ortools_java${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp build/java/ortools-*/target/*.jar $MY_DIR
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
          df -h
          pwd
          ls -ltr
          ls -ltr ${MY_DIR}
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}"
          echo "MY_DIR=${MY_DIR}"
          echo "PWD=$PWD"
          zip -r $ARCHIVE_PATH $MY_DIR
          echo "::set-output name=archive_name::$ARCHIVE_NAME"
          echo "::set-output name=archive_path::$ARCHIVE_PATH"
      - name: Upload OR-Tools jar artifact
        if: ${{ matrix.cmake.java == 'ON' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.jar.outputs.archive_name }}
          path: ${{ steps.jar.outputs.archive_path }}

  publish_asset:
    name: Publish release assets
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        if: ${{ env.RELEASE_CREATED == 'true' }}
        uses: actions/download-artifact@v3

      - name: Publish assets
        if:  ${{ env.RELEASE_CREATED == 'true' }}
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["*/*.zip"]'
