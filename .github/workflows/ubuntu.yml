name: Ubuntu

on:
  push:
    branches:
      - main
      - feature/*
      - merge*
      - fix/*
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  build:
    name: ${{ matrix.os }} shrd=${{ matrix.cmake.shared }} java=${{ matrix.cmake.java }} dotnet=${{ matrix.cmake.dotnet }} python=${{ matrix.cmake.python }}-${{ matrix.cmake.python-version }}
    runs-on: ${{ matrix.os }}
    env:
      XPRESSDIR: ${{ github.workspace }}/xpressmp
      XPAUTH_PATH: ${{ github.workspace }}/xpressmp/bin/xpauth.xpr
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04"]
        cmake: [
          {shared: OFF, java: OFF, dotnet: OFF, python: OFF, python-version: "3.8",  publish-cxx-or: ON},
          {shared: ON,  java: ON,  dotnet: ON,  python: OFF, python-version: "3.8",  publish-cxx-or: ON},
          {shared: ON,  java: OFF, dotnet: OFF, python: ON,  python-version: "3.8",  publish-cxx-or: OFF},
          {shared: ON,  java: OFF, dotnet: OFF, python: ON,  python-version: "3.9",  publish-cxx-or: OFF},
          {shared: ON,  java: OFF, dotnet: OFF, python: ON,  python-version: "3.10", publish-cxx-or: OFF},
        ]

    steps:
      - name: Checkout or-tools
        uses: actions/checkout@v4

      - name: Swig install
        run: |
          sudo apt install -y swig
          swig -version
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cmake.python-version }}
      - name: Update Path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.26.x'

      - name: Setup .NET 6.0
        if: ${{ matrix.cmake.dotnet == 'ON' }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Set-up Xpress with pip for Ubuntu
        shell: bash
        run: |
          python -m pip install xpress==9.0.0
          echo ${{ env.pythonLocation }}
          XPRESS_DIR=${{ env.pythonLocation }}/lib/python${{ matrix.cmake.python-version }}/site-packages/xpress
          echo "XPRESSDIR=$XPRESS_DIR" >> $GITHUB_ENV
          echo "XPAUTH_PATH=$XPRESS_DIR/license/community-xpauth.xpr" >> $GITHUB_ENV
          echo "Create symbolic link for XPRESS library file because it is missing in the Python installation"
          ln -s $XPRESS_DIR/lib/libxprs.so.41 $XPRESS_DIR/lib/libxprs.so

      - name: Check cmake
        run: cmake --version
      - name: Configure OR-Tools
        run: >
          cmake -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=${{ matrix.cmake.shared }}
          -DBUILD_PYTHON=${{ matrix.cmake.python }}
          -DBUILD_JAVA=${{ matrix.cmake.java }}
          -DBUILD_DOTNET=${{ matrix.cmake.dotnet }}
          -DBUILD_EXAMPLES=ON
          -DBUILD_DEPS=ON
          -DBUILD_SAMPLES=OFF
          -DBUILD_XPRESS_TEST_AND_EXAMPLES=ON
          -DCMAKE_INSTALL_PREFIX="build/install"

      - name: Build OR-Tools Linux
        run: >
          cmake
          --build build
          --config Release
          --target all install -j4

      - name: run tests not xpress
        working-directory: ./build/
        run: >
          ctest
          -C Release
          --output-on-failure
          -E "xpress"

      - name: run tests xpress
        working-directory: ./build/
        run: >
          ctest 
          -V 
          -C Release 
          --output-on-failure 
          -R "xpress"

      - name: set name variables
        id: names
        shell: bash
        run: |
          SHARED=${{ matrix.cmake.shared }}
          [ $SHARED == "ON" ] && WITH_SHARED="_shared" || WITH_SHARED="_static"
          OS="_${{ matrix.os }}"
          APPENDIX="${OS}"
          echo "::set-output name=appendix::$APPENDIX"
          APPENDIX_WITH_SHARED="${OS}${WITH_SHARED}"
          echo "::set-output name=appendix_with_shared::$APPENDIX_WITH_SHARED"

      - name: is release created
        shell: bash
        run: |
          release_created=${{ github.event_name == 'release' && github.event.action == 'created' }}
          echo "RELEASE_CREATED=$release_created" >> $GITHUB_ENV

      - name: Get release
        if: ${{ env.RELEASE_CREATED == 'true' }}
        id: get_release
        uses:
          bruceadams/get-release@v1.2.3

      - name: Prepare OR-Tools install
        if: ${{ matrix.cmake.publish-cxx-or == 'ON' }}
        id: or-install
        shell: bash
        run: |
          cd build
          ARCHIVE_NAME="ortools_cxx${{ steps.names.outputs.appendix_with_shared }}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "$ARCHIVE_PATH" ./install
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT
          

      - name: Upload OR-Tools install artifact
        uses: actions/upload-artifact@v3
        if: ${{ env.RELEASE_CREATED == 'false' && matrix.cmake.publish-cxx-or == 'ON' }}
        with:
          name: ${{ steps.or-install.outputs.archive_name }}
          path: ${{ steps.or-install.outputs.archive_path }}

      - name: Publish OR-Tools install asset
        if:  ${{ env.RELEASE_CREATED == 'true' && matrix.cmake.publish-cxx-or == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.or-install.outputs.archive_path }}
          asset_name: ${{ steps.or-install.outputs.archive_name }}
          asset_content_type: application/zip

      - name: prepare OR-Tools wheel
        if: ${{ matrix.cmake.python == 'ON' }}
        id: wheel
        shell: bash
        run: |
          cd ./build/python/dist
          MY_DIR="ortools_python-${{ matrix.cmake.python-version }}${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp *.whl "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      - name: Upload OR-Tools wheel artifact
        if: ${{ env.RELEASE_CREATED == 'false' && matrix.cmake.python == 'ON' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wheel.outputs.archive_name }}
          path: ${{ steps.wheel.outputs.archive_path }}
      - name: Publish OR-Tools wheel asset
        if:  ${{ env.RELEASE_CREATED == 'true' && matrix.cmake.python == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.wheel.outputs.archive_path }}
          asset_name: ${{ steps.wheel.outputs.archive_name }}
          asset_content_type: application/zip

      - name: prepare OR-Tools jar
        if: ${{ matrix.cmake.java == 'ON' }}
        id: jar
        shell: bash
        run: |
          cd ./build/java
          MY_DIR="ortools_java${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp ortools-*/target/*.jar "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      - name: Upload OR-Tools jar artifact
        if: ${{ env.RELEASE_CREATED == 'false' && matrix.cmake.java == 'ON' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.jar.outputs.archive_name }}
          path: ${{ steps.jar.outputs.archive_path }}
      - name: Publish OR-Tools jar asset
        if:  ${{ env.RELEASE_CREATED == 'true' && matrix.cmake.java == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.jar.outputs.archive_path }}
          asset_name: ${{ steps.jar.outputs.archive_name }}
          asset_content_type: application/zip

      - name: prepare OR-Tools dotnet
        if: ${{ matrix.cmake.dotnet == 'ON' }}
        id: dotnet
        shell: bash
        run: |
          cd ./build/dotnet/packages/
          MY_DIR="ortools_dotnet${{ steps.names.outputs.appendix }}"
          mkdir ${MY_DIR}
          cp Google.OrTools.*.nupkg "${MY_DIR}"
          cp Google.OrTools.runtime.*.nupkg "${MY_DIR}"
          ARCHIVE_NAME="${MY_DIR}.zip"
          ARCHIVE_PATH="${{ github.workspace }}/build/${ARCHIVE_NAME}"
          zip -r "${ARCHIVE_PATH}" "${MY_DIR}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "archive_path=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      - name: Upload OR-Tools dotnet artifact
        if: ${{ env.RELEASE_CREATED == 'false' && matrix.cmake.dotnet == 'ON' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.dotnet.outputs.archive_name }}
          path: ${{ steps.dotnet.outputs.archive_path }}
      - name: Publish OR-Tools dotnet asset
        if:  ${{ env.RELEASE_CREATED == 'true' && matrix.cmake.dotnet == 'ON' }}
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.dotnet.outputs.archive_path }}
          asset_name: ${{ steps.dotnet.outputs.archive_name }}
          asset_content_type: application/zip
